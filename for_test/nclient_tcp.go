package main

import (
	"dbus/dbus"
	"encoding/binary"
	"fmt"
	"net"
	"time"
)

var (
	index    int64  = 0
	btime    int64  = time.Now().UnixMicro()
	ttime    int64  = time.Now().UnixMicro()
	sendData []byte = make([]byte, dbus.MaxNakBufferSize)
)

func CliTcpCallback(data []byte, conn *net.Conn) {
	index++
	etime := time.Now().UnixMicro()
	if etime-btime >= 3000000 {
		fmt.Printf("all: %d, avg: %d\n", index, index*1000000/(etime-ttime))
		btime = etime
	}

	(*conn).Write(data)
}

func main() {
	dbus.Init("127.0.0.1", 8001, "82.156.224.174:2379")
	cli := dbus.NNewTcpClient(CliTcpCallback)
	evItem := cli.ConnectServer("127.0.0.1:8990")
	if evItem == nil {
		fmt.Println("connect error.")
		return
	}

	msg := []byte("sdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdsdgasdfasdfasdfasdfasdfasdgasdfasdgasdfasdfasdfasdfasdfasdgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdfgasdfawefasdfasdgasdfwefasdfasdfwefasdfasdgasdfwefasdfasdf")
	val := make([]byte, 4+len(msg))
	binary.BigEndian.PutUint32(val, uint32(4+len(msg)))
	copy(val[4:], msg)
	cli.Send(evItem, val)
	time.Sleep(time.Second * 100000)
	fmt.Println("close success")
}
